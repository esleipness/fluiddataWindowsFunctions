# -*- coding: utf-8 -*-
"""Swift_ML_Studies.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KWXdPLCifLZZkUf46UWXSm3aW0EyQpfV

SwiftData: ML exercise.
"""

#package import, mute upload package warnings

import numpy as np
import pandas as pd
import seaborn as sns
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import SGDClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import BernoulliNB
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import MultinomialNB
from sklearn.ensemble import VotingClassifier
from sklearn.metrics import f1_score


import warnings
warnings.filterwarnings('ignore')

print("Important libraries loaded successfully")

"""Notes on the dataset: edit to pull in date.  Perform year and seasonal MLs."""

# pull in the dataset.
df_swift = pd.read_csv("/content/SwiftPopulartity.csv")
df_swift

"""Clean the data:

1. round the decimals in attribute columns.
2. remove excessive nulls
"""

# select columns to round. Since there are multiple, a function can be utilized.
#select columns 1:11 (counting starts at 0, the endpoint isn't included)

decimal_places = 3
df_swift[1:10] = df_swift[1:10].round(decimal_places)

df_swift.head()

#get the length

len(df_swift)

#get total count of data including missing data
total = df_swift.isnull().sum().sort_values(ascending=False)

#get percent of missing data relevant to all data
percent = (df_swift.isnull().sum()/df_swift.isnull().count()).sort_values(ascending=False)

missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])
missing_data.head(df_swift.shape[1])

#There are no nulls. Okay to proceed. Re-check if additional columns are added.

"""Idenitfy x (features) and y(target)"""

!pip install pandas
import pandas as pd

swiftfeatures = df_swift[['danceability', 'energy', 'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'explicit']]
x = swiftfeatures
y = df_swift['track_popularity']

"""Multiple Regression Model"""

from sklearn.linear_model import LinearRegression

"""Split into train and test"""

# Split data into train and test
X_train, X_test, y_train, y_test = train_test_split(
    x, y, test_size=0.3, random_state=101)
model = LinearRegression()
model.fit(X_train,y_train)
model2 = LinearRegression()
model2.fit = (x,y)

"""Make Predictions"""

predictions = model.predict(X_test)

from sklearn.metrics import mean_squared_error, mean_absolute_error
print(
  'mean_squared_error : ', mean_squared_error(y_test, predictions))
print(
  'mean_absolute_error : ', mean_absolute_error(y_test, predictions))

print(model2.get_params())

import statsmodels.api as sm

X = sm.add_constant(x)
est = sm.OLS(y, X).fit()
est.summary()